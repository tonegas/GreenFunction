// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_EXAMPLE_GREENFUNCTION_H_
#define FLATBUFFERS_GENERATED_EXAMPLE_GREENFUNCTION_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace GreenFunction {

struct CoDriverStruct;

struct GreenStruct;

struct ICoDriver;
struct ICoDriverBuilder;

struct IGreen;
struct IGreenBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) CoDriverStruct FLATBUFFERS_FINAL_CLASS {
 private:
  double double_array_[3];

 public:
  CoDriverStruct()
      : double_array_() {
  }
  CoDriverStruct(::flatbuffers::span<const double, 3> _double_array) {
    ::flatbuffers::CastToArray(double_array_).CopyFromSpan(_double_array);
  }
  const ::flatbuffers::Array<double, 3> *double_array() const {
    return &::flatbuffers::CastToArray(double_array_);
  }
};
FLATBUFFERS_STRUCT_END(CoDriverStruct, 24);

/// I am a comment that will be included in the generated code
FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) GreenStruct FLATBUFFERS_FINAL_CLASS {
 private:
  double double_array_[3];

 public:
  GreenStruct()
      : double_array_() {
  }
  GreenStruct(::flatbuffers::span<const double, 3> _double_array) {
    ::flatbuffers::CastToArray(double_array_).CopyFromSpan(_double_array);
  }
  const ::flatbuffers::Array<double, 3> *double_array() const {
    return &::flatbuffers::CastToArray(double_array_);
  }
};
FLATBUFFERS_STRUCT_END(GreenStruct, 24);

struct ICoDriver FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ICoDriverBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_DATA = 6
  };
  uint64_t id() const {
    return GetField<uint64_t>(VT_ID, 0);
  }
  const GreenFunction::CoDriverStruct *data() const {
    return GetStruct<const GreenFunction::CoDriverStruct *>(VT_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ID, 8) &&
           VerifyField<GreenFunction::CoDriverStruct>(verifier, VT_DATA, 8) &&
           verifier.EndTable();
  }
};

struct ICoDriverBuilder {
  typedef ICoDriver Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(uint64_t id) {
    fbb_.AddElement<uint64_t>(ICoDriver::VT_ID, id, 0);
  }
  void add_data(const GreenFunction::CoDriverStruct *data) {
    fbb_.AddStruct(ICoDriver::VT_DATA, data);
  }
  explicit ICoDriverBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ICoDriver> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ICoDriver>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ICoDriver> CreateICoDriver(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    const GreenFunction::CoDriverStruct *data = nullptr) {
  ICoDriverBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_data(data);
  return builder_.Finish();
}

struct IGreen FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef IGreenBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_DATA = 6
  };
  uint64_t id() const {
    return GetField<uint64_t>(VT_ID, 0);
  }
  const GreenFunction::GreenStruct *data() const {
    return GetStruct<const GreenFunction::GreenStruct *>(VT_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ID, 8) &&
           VerifyField<GreenFunction::GreenStruct>(verifier, VT_DATA, 8) &&
           verifier.EndTable();
  }
};

struct IGreenBuilder {
  typedef IGreen Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(uint64_t id) {
    fbb_.AddElement<uint64_t>(IGreen::VT_ID, id, 0);
  }
  void add_data(const GreenFunction::GreenStruct *data) {
    fbb_.AddStruct(IGreen::VT_DATA, data);
  }
  explicit IGreenBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<IGreen> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<IGreen>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<IGreen> CreateIGreen(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    const GreenFunction::GreenStruct *data = nullptr) {
  IGreenBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_data(data);
  return builder_.Finish();
}

inline const GreenFunction::IGreen *GetIGreen(const void *buf) {
  return ::flatbuffers::GetRoot<GreenFunction::IGreen>(buf);
}

inline const GreenFunction::IGreen *GetSizePrefixedIGreen(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<GreenFunction::IGreen>(buf);
}

inline bool VerifyIGreenBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<GreenFunction::IGreen>(nullptr);
}

inline bool VerifySizePrefixedIGreenBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<GreenFunction::IGreen>(nullptr);
}

inline void FinishIGreenBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GreenFunction::IGreen> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedIGreenBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GreenFunction::IGreen> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace GreenFunction

#endif  // FLATBUFFERS_GENERATED_EXAMPLE_GREENFUNCTION_H_
